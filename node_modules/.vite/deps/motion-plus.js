import {
  invariant,
  resolveElements
} from "./chunk-3HLCHKKB.js";
import "./chunk-G3PMV62Z.js";

// node_modules/motion-plus-dom/dist/es/split-text/index.mjs
function createSpan(className, index) {
  const span = document.createElement("span");
  if (className) {
    span.className = className;
  }
  if (index !== void 0) {
    span.dataset.index = index.toString();
  }
  span.style.display = "inline-block";
  return span;
}
function addToken(element, token, className, index) {
  const charSpan = createSpan(className, index);
  charSpan.textContent = token;
  element.appendChild(charSpan);
  return charSpan;
}
function splitText(elementOrSelector, { splitBy = " ", charClass = "split-char", wordClass = "split-word", lineClass = "split-line" } = {}) {
  var _a;
  const [element] = resolveElements(elementOrSelector);
  invariant(Boolean(element), "Element not found");
  const text = element.textContent || "";
  element.setAttribute("aria-label", text);
  element.textContent = "";
  const splitElements = {
    chars: [],
    words: [],
    lines: []
  };
  const words = text.split(splitBy);
  const wordElements = [];
  const spacerElements = [];
  for (let wordIndex = 0; wordIndex < words.length; wordIndex++) {
    const word = words[wordIndex];
    const wordSpan = createSpan(wordClass, wordIndex);
    splitElements.words.push(wordSpan);
    wordElements.push(wordSpan);
    const chars = Array.from(word);
    for (let charIndex = 0; charIndex < chars.length; charIndex++) {
      const char = chars[charIndex];
      const charSpan = addToken(wordSpan, char, charClass, charIndex);
      splitElements.chars.push(charSpan);
    }
    element.appendChild(wordSpan);
    if (wordIndex < words.length - 1) {
      if (splitBy === " ") {
        const spaceNode = document.createTextNode(" ");
        element.appendChild(spaceNode);
        spacerElements.push(spaceNode);
      } else {
        const delimiterSpan = addToken(wordSpan, splitBy, `${charClass}-delimiter`);
        splitElements.chars.push(delimiterSpan);
      }
    }
  }
  const wordData = wordElements.map((wordSpan, index) => {
    return {
      element: wordSpan,
      top: wordSpan.offsetTop,
      index,
      spacer: index < spacerElements.length ? spacerElements[index] : null
    };
  });
  const lines = [];
  let currentLine = [];
  let currentTop = ((_a = wordData[0]) == null ? void 0 : _a.top) ?? 0;
  let lineIndex = 0;
  for (let i = 0; i < wordData.length; i++) {
    const { element: element2, top, spacer } = wordData[i];
    if (top > currentTop && currentLine.length > 0) {
      lines.push({ elements: currentLine, lineIndex: lineIndex++ });
      currentLine = [];
      currentTop = top;
    }
    currentLine.push(element2);
    if (spacer) {
      currentLine.push(spacer);
    }
  }
  if (currentLine.length > 0) {
    lines.push({ elements: currentLine, lineIndex });
  }
  element.textContent = "";
  for (const { elements, lineIndex: lineIndex2 } of lines) {
    const lineSpan = createSpan(lineClass, lineIndex2);
    lineSpan.style.display = "inline-block";
    splitElements.lines.push(lineSpan);
    for (const node of elements) {
      lineSpan.appendChild(node);
    }
    element.appendChild(lineSpan);
  }
  return splitElements;
}
export {
  splitText
};
//# sourceMappingURL=motion-plus.js.map
