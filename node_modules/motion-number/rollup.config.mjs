import resolve from "@rollup/plugin-node-resolve"
import replace from "@rollup/plugin-replace"
import dts from "rollup-plugin-dts"
import preserveDirectives from "rollup-plugin-preserve-directives"
import { terser } from "rollup-plugin-terser"
import pkg from "./package.json" with { type: "json" }
import tsconfig from "./tsconfig.json" with { type: "json" }

const replaceSettings = (env, useFramerMotion) => {
  const replaceConfig = env
      ? {
            "process.env.NODE_ENV": JSON.stringify(env),
            preventAssignment: false,
        }
      : {
            preventAssignment: false,
        }

  replaceConfig.__VERSION__ = `${pkg.version}`

  if (useFramerMotion) {
    replaceConfig["motion/react"] = "framer-motion"
  }

  return replace(replaceConfig)
}


const external = [
  ...Object.keys(pkg.dependencies || {}),
  ...Object.keys(pkg.peerDependencies || {}),
  ...Object.keys(pkg.optionalDependencies || {}),
  "motion/react",
  "react/jsx-runtime",
]




const es = Object.assign({}, {
  input: ["lib/index.js"],
  output: {
      entryFileNames: "[name].mjs",
      format: "es",
      exports: "named",
      preserveModules: true,
      dir: "dist/es",
  },
  plugins: [resolve(), replaceSettings(), preserveDirectives()],
  external,
  onwarn(warning, warn) {
      if (warning.code === 'MODULE_LEVEL_DIRECTIVE') {
          return
      }
      warn(warning)
  }
})

const size = Object.assign({}, es, {
    input: "lib/index.js",
    output: Object.assign({}, es.output, {
        file: "dist/motion-number.size.js",
        preserveModules: false,
        dir: undefined,
    }),
    plugins: [
        resolve(),
        replaceSettings("production"),
        terser({ output: { comments: false } }),
    ],
    external,
    onwarn(warning, warn) {
        if (warning.code === "MODULE_LEVEL_DIRECTIVE") {
            return
        }
        warn(warning)
    },
})

const cjs = Object.assign({}, {
    input: "lib/index.js",
    output: {
        entryFileNames: `[name].js`,
        dir: "dist/cjs",
        format: "cjs",
        exports: "named",
        esModule: true
    },
    plugins: [resolve(), replaceSettings()],
    external,
    onwarn(warning, warn) {
        if (warning.code === 'MODULE_LEVEL_DIRECTIVE') {
            return
        }
        warn(warning)
    }
})

// const cjsM = {...cjs, input: "lib/m.js"}

const typePlugins = [
    dts({ compilerOptions: { ...tsconfig, baseUrl: "types" } }),
]

function createTypes(input, file) {
    return {
        input,
        output: {
            format: "es",
            file: file,
        },
        plugins: typePlugins,
    }
}

const types = createTypes("types/index.d.ts", "dist/index.d.ts")
// const typesM = createTypes("types/m.d.ts", "dist/m.d.ts")

export default [es, size, cjs, types]
