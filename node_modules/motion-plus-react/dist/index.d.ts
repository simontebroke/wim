import * as react from 'react';
import { ComponentProps } from 'react';
import { Point, SpringOptions, HTMLMotionProps, MotionValue, MotionConfig, MotionProps } from 'motion/react';
import * as react_jsx_runtime from 'react/jsx-runtime';

type CursorProps = {
    follow?: boolean;
    center?: Point;
    offset?: Point;
    spring?: false | SpringOptions;
    snapToTarget?: boolean;
    matchTextSize?: boolean;
};
declare function Cursor({ follow, center, offset: offsetPoint, spring, snapToTarget, matchTextSize, children, ...props }: CursorProps & HTMLMotionProps<"div">): react.ReactPortal | null;

declare function useCursorIsInView(resetSpring: VoidFunction): boolean;

type CursorType = "pointer" | "default" | "text";
interface CursorState {
    type: CursorType;
    isPressed: boolean;
    fontSize: number | null;
    targetBoundingBox: {
        width: number;
        height: number;
        top: number;
        right: number;
        bottom: number;
        left: number;
    } | null;
}

declare function useCursorState(): CursorState;

declare function usePointerPosition(): {
    x: MotionValue<number>;
    y: MotionValue<number>;
};

type AnimateNumberProps = Omit<HTMLMotionProps<"span">, "children"> & {
    children: number | bigint | string;
    locales?: Intl.LocalesArgument;
    format?: Omit<Intl.NumberFormatOptions, "notation"> & {
        notation?: Exclude<Intl.NumberFormatOptions["notation"], "scientific" | "engineering">;
    };
    transition?: ComponentProps<typeof MotionConfig>["transition"];
    suffix?: string;
    prefix?: string;
};
declare const AnimateNumber: react.ForwardRefExoticComponent<Omit<AnimateNumberProps, "ref"> & react.RefAttributes<HTMLDivElement>>;

interface AnimateTextProps {
    children: string;
    splitBy?: string;
    charClass?: string;
    wordClass?: string;
    lineClass?: string;
    type?: "char" | "word" | "line";
    variants?: MotionProps["variants"];
}
declare function AnimateText({ children, splitBy, charClass, wordClass, lineClass, type, variants, ...props }: AnimateTextProps): react_jsx_runtime.JSX.Element;

export { AnimateNumber, type AnimateNumberProps, AnimateText, type AnimateTextProps, Cursor, type CursorProps, useCursorIsInView, useCursorState, usePointerPosition };
